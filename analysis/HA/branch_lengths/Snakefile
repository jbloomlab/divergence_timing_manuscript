"""
Pipeline for prepping HA sequences for `phydms`

SKH 20171212
"""
import glob
import os
from Bio import SeqIO
import numpy as np
import pandas as pd
from pymodules.utils import *
from ete3 import Tree
# import re
# import random
# import os
# import pandas as pd
# import glob
# import scipy
# from pymodules.utils import *
# from collections import Counter

# Globals ---------------------------------------------------------------------

# Directories
ALIGNMENT_DIR = "../data/subsample/"
PREFERENCES_DIR = "../data/references/"

# Alignment IDs
ALIGNMENT_IDS = ["_".join(os.path.basename(x).split(".")[0].split("_")[1:])
                 for x in glob.glob("{0}/*.fasta".format(ALIGNMENT_DIR))]
SEEDS = [int(x.split("_")[-1]) for x in ALIGNMENT_IDS]
LEVELS = [x.split("_")[1] for x in ALIGNMENT_IDS]

# Bootstrap params
REPS = range(10)

# Rules -----------------------------------------------------------------------

rule all:
    input:
        expand("phydms/hybrid_{level}_{seed}_modelcomparison.md", level=LEVELS,
               seed=SEEDS),
        "outputs/branch_lengths.csv",
        "outputs/model_by_model.csv",
        "outputs/params.csv",
        "outputs/tree_length.csv"

# Run `phydms_comprehensive` for each of the preference sets (next 3 rules)
rule run_phydms_Lee:
    """
    This rule runs `phydms_comprehensive` for the alignments aligned to Perth.
    """
    message: "Running `phydms_comprehensive` with Juhye's preferences."
    input:
        alignment = ALIGNMENT_DIR + "HA_Perth_{level}_{seed}.fasta"
    output:
        modelcomparison = "phydms/Perth_{level}_{seed}_modelcomparison.md"
    params:
        prefs = "{0}HA_Lee_prefs.csv".format(PREFERENCES_DIR),
        phydms_id = 'Perth_{level}_{seed}'
    shell:
        'phydms_comprehensive phydms/{params.phydms_id} {input.alignment} \
                {params.prefs} --raxml raxml --gammaomega --randprefs'

rule run_phydms_Doud:
    """
    This rule runs `phydms_comprehensive` for the alignments aligned to WSN.
    """
    message: "Running `phydms_comprehensive` with Mike's preferences."
    input:
        alignment = ALIGNMENT_DIR + "HA_WSN_{level}_{seed}.fasta"
    output:
        modelcomparison = "phydms/WSN_{level}_{seed}_modelcomparison.md"
    params:
        prefs = "{0}HA_Doud_prefs.csv".format(PREFERENCES_DIR),
        phydms_id = 'WSN_{level}_{seed}'
    shell:
        'phydms_comprehensive phydms/{params.phydms_id} {input.alignment}\
                {params.prefs} --raxml raxml --gammaomega --randprefs'

rule run_phydms_hybrid:
    """
    This rule runs `phydms_comprehensive` for the alignments aligned to the
    hybrid sequence.
    """
    message: "Running `phydms_comprehensive` with average preferences."
    input:
        alignment = ALIGNMENT_DIR + "HA_hybrid_{level}_{seed}.fasta"
    output:
        modelcomparison = "phydms/hybrid_{level}_{seed}_modelcomparison.md"
    params:
        pref = " ".join(["{0}HA_average_prefs.csv".format(PREFERENCES_DIR),
                         "{0}HA_hybridDoud_prefs.csv".format(PREFERENCES_DIR),
                         "{0}HA_hybridLee_prefs.csv".format(PREFERENCES_DIR)]),
        phydms_id = 'hybrid_{level}_{seed}'
    shell:
        'phydms_comprehensive phydms/{params.phydms_id} {input.alignment} \
                {params.pref} --raxml raxml --gammaomega --randprefs'

# Make the bootstrapped alignments

rule create_bootstrap_alignment:
    """
    This rule creates a bootstrapped alignment by sampling (with replacement)
    the columns of the alignment. The function also creates the matching
    preference file.
    """
    message: "Creating the bootstrap alignments."
    input:
        alignment = ALIGNMENT_DIR + "HA_{alignment_id}.fasta"
    output:
        alignment = temp("bootstrap/{alignment_id}_{rep}.fasta"),
        preferences = temp("bootstrap/{alignment_id}_{rep}_prefs.csv")
    params:
        seed = '{rep}',
        alignment_id = '{alignment_id}'
    run:
        ref_pref = {"Perth": "{0}/HA_Lee_prefs.csv".format(PREFERENCES_DIR),
                    "WSN": "{0}/HA_Doud_prefs.csv".format(PREFERENCES_DIR),
                    "hybrid": "{0}/HA_average_prefs.csv"
                    .format(PREFERENCES_DIR)}
        prefs = pd.read_csv(ref_pref[params.alignment_id.split("_")[0]])
        sites = prefs["site"].tolist()
        seed = int(params.seed)
        repeat = True
        while repeat:
            final = {}
            for s in SeqIO.parse(input.alignment, "fasta"):
                seq = str(s.seq)
                np.random.seed(seed)
                codons = [seq[x:x+3] for x in range(0, len(seq), 3)]
                print(len(codons))
                sample = "".join(np.random.choice(codons, len(codons),
                                 replace=True))
                final[s.id] = sample
            seqs = list(final.values())
            if len(seqs) == len(set(seqs)):
                repeat = False
            else:
                seed = (seed+500) * -1.5
        np.random.seed(seed)
        sites = np.random.choice(sites, len(sites), replace=True)
        prefs = pd.concat([prefs[prefs["site"] == x] for x in sites])
        prefs["site"] = [x for x in range(1, len(prefs)+1)]
        prefs.to_csv(output.preferences, index=False)
        with open(output.alignment, "w") as f:
            for key in final.keys():
                f.write(">{0}\n{1}\n".format(key, final[key]))
        print(len(sites))
        first = list(final.keys())[0]
        print(len(final[first]))

# Run `phydms` on the bootstrap alignments
rule run_phydms_bootstrap:
    """
    This rule runs `phydms_comprehensive` for the boostrapped alignments.
    """
    message: "Running `phydms_comprehensive` w/ bootstrapped alignments."
    input:
        alignment = "bootstrap/{alignment_id}_{rep}.fasta",
        prefs = "bootstrap/{alignment_id}_{rep}_prefs.csv"
    output:
        modelcomparison = "bootstrap/{alignment_id}_{rep}_modelcomparison.md"
    params:
        phydms_id = '{alignment_id}_{rep}'
    shell:
        'phydms_comprehensive bootstrap/{params.phydms_id} {input.alignment} \
                {input.prefs} --raxml raxml --gammaomega --randprefs'

# Make summary files
rule calc_branch_lengths:
    """
    The purpose of this rule is to calculate all pairwise branches
    for the bootstrap and pairwise alignments.
    """
    message: "Calculate branch lengths"
    input:
        true_runs = expand("phydms/{alignment_id}_modelcomparison.md",
                           alignment_id=ALIGNMENT_IDS),
        # bootstrap_runs = expand("bootstrap/{alignment_id}_{rep}\
        #                         _modelcomparison.md",
        #                         alignment_id=ALIGNMENT_IDS, rep=REPS)
    output:
        summary = "outputs/branch_lengths.csv"
    run:
        final_cols = ["seq_id", "sequence1", "sequence2", "model", "distance",
                      "alignment_id", "alignment_ref", "divergence_level",
                      "from_ref", "pref_set"]
        final = []
        # for run in input.true_runs + input.bootstrap_runs:
        for run in input.true_runs:
            bootstrap = run.split("/")[0]
            assert bootstrap in ["bootstrap", "phydms"]
            alignment_id = os.path.basename("_".join(run.split("_")[:-1]))
            for tree_fname in \
                    glob.glob("{0}/{1}*.newick".format(bootstrap,
                                                       alignment_id)):
                model_name, control = extract_model_name(tree_fname)
                if model_name in ["ExpCM", "ExpCM_gammaomega"]:
                    if "ExpCM_HA_hybridDoud_prefs" in tree_fname:
                        pref_set = "Doud"
                    elif "ExpCM_HA_hybridLee_prefs" in tree_fname:
                        pref_set = "Lee"
                    elif "ExpCM_HA_average_prefs" in tree_fname:
                        pref_set = "average"
                    else:
                        raise ValueError("Couldn't parse pref set: {0}"
                                         .format(tree_fname))
                else:
                    pref_set = "NA"
                if control == 0:
                    df = calc_distances(tree_fname)
                    df["model"] = [model_name for x in range(len(df))]
                    df["alignment_id"] = [alignment_id for x in range(len(df))]
                    df["alignment_ref"] = [alignment_id.split("_")[0] for x in
                                           range(len(df))]
                    df["divergence_level"] = [alignment_id.split("_")[1]
                                              for x in range(len(df))]
                    # df["bootstrap"] = [bootstrap for x in range(len(df))]
                    df["from_ref"] = ['WSN' if "Wilson-Smith" in x else 'Perth'
                                      if "Perth" in x else 'no' for x
                                      in df["seq_id"]]
                    df["pref_set"] = [pref_set for x in range(len(df))]
                    final.append(df)
        final = pd.concat(final)
        final = final[final_cols]
        final.to_csv(output.summary, index=False)

rule make_model_by_model:
    """
    The purpose of this rule is to reformat the branch lengths summary file
    to make it easy for plotting.
    """
    message: "Creating model by model"
    input:
        branch_lengths = "outputs/branch_lengths.csv"
    output:
        model_by_model = "outputs/model_by_model.csv"
    run:
        final = []
        model_pairs = {
                       ("ExpCM", "average"): [("GY94", 0)],
                       ("GY94_gammaomega", "average"): [("GY94", 0)],
                       ("ExpCM_gammaomega", "average"): [("ExpCM", "average"),
                                                         ("GY94_gammaomega",
                                                         0)],
                       ("ExpCM", "Doud"): [("GY94", 0)],
                       ("GY94_gammaomega", "Doud"): [("GY94", 0)],
                       ("ExpCM_gammaomega", "Doud"): [("ExpCM", "Doud"),
                                                      ("GY94_gammaomega", 0)],
                       ("ExpCM", "Lee"): [("GY94", 0)],
                       ("GY94_gammaomega", "Lee"): [("GY94", 0)],
                       ("ExpCM_gammaomega", "Lee"): [("ExpCM", "Lee"),
                                                     ("GY94_gammaomega", 0)]
                       }
        df = pd.read_csv(input.branch_lengths)
        df = df.fillna(0)
        for alignment, alignment_df in df.groupby(["alignment_id"]):
            for model_1, model_1_df in alignment_df.groupby(["model",
                                                             "pref_set"]):
                if model_1 in list(model_pairs.keys()):
                    first = model_1_df[["seq_id", "distance"]]
                    for model_2, temp in alignment_df.groupby(["model",
                                                               "pref_set"]):
                        if model_2 in model_pairs[model_1]:
                            long_name = "{0}_{1}/{2}_{3}".format(model_1[0],
                                                                 model_1[1],
                                                                 model_2[0],
                                                                 model_2[1])
                            model_pair = "{0}/{1}".format(model_1[0],
                                                          model_2[0])
                            temp["model_pair"] = [model_pair for x in
                                                  range(len(temp))]
                            temp["model_pair_long"] = [long_name for x in
                                                       range(len(temp))]
                            temp = temp.rename(columns={"distance":
                                                        "distance2"})
                            temp = temp.drop(['model'], axis=1)
                            temp = temp.merge(first, on=['seq_id'])
                            temp = temp.rename(columns={"distance":
                                                        "distance1"})
                            final.append(temp)
        final = pd.concat(final)
        final.to_csv(output.model_by_model, index=False)

rule summarize_betas:
    """
    The purpose of this rule is make a summary file for all of the fit
    parameter values.
    """
    message: "Summarizing params"
    input:
        phydms_runs = expand("phydms/{alignment_id}_modelcomparison.md",
                             alignment_id=ALIGNMENT_IDS)
    output:
        params = "outputs/params.csv"
    run:
        df = []
        for run in input.phydms_runs:
            alignment_id = os.path.basename("_".join(run.split("_")[:-1]))
            for model_param in glob.glob("phydms/{0}*modelparams.txt"
                                         .format(alignment_id)):
                if ("randomized" not in model_param) and ("averaged" not in
                                                          model_param):
                    model_name = extract_model_name(model_param)
                    pref_name = extract_pref_name(model_param)
                    temp = pd.read_csv(model_param, sep=" = ", header=None,
                                       engine="python")
                    temp.columns = ["param", "value"]
                    temp["model"] = [model_name[0] for x in range(len(temp))]
                    temp["pref_set"] = [pref_name for x in range(len(temp))]
                    temp["alignment_id"] = [alignment_id for x in
                                            range(len(temp))]
                    temp["alignment_ref"] = [alignment_id.split("_")[0] for x
                                             in range(len(temp))]
                    temp["divergence_level"] = [alignment_id.split("_")[1]
                                                for x in range(len(temp))]
                    df.append(temp)
        df = pd.concat(df)
        df.to_csv(output.params, index=False)

rule calc_total_branch_length:
    """
    The purpose of this rule is calculate the overall length of branches on a
    tree.
    """
    message: "Tree length"
    input:
        phydms_runs = expand("phydms/{alignment_id}_modelcomparison.md",
                             alignment_id=ALIGNMENT_IDS)
    output:
        tree = "outputs/tree_length.csv"
    run:
        final = {"alignment_id": [], "model": [], "pref_set": [],
                 "tree_length": []}
        for run in input.phydms_runs:
            bootstrap = run.split("/")[0]
            assert bootstrap in ["bootstrap", "phydms"]
            alignment_id = os.path.basename("_".join(run.split("_")[:-1]))
            for tree_fname in \
                    glob.glob("{0}/{1}*.newick".format(bootstrap,
                                                       alignment_id)):
                model_name, control = extract_model_name(tree_fname)
                if model_name in ["ExpCM", "ExpCM_gammaomega"]:
                    if "ExpCM_HA_hybridDoud_prefs" in tree_fname:
                        pref_set = "Doud"
                    elif "ExpCM_HA_hybridLee_prefs" in tree_fname:
                        pref_set = "Lee"
                    elif "ExpCM_HA_average_prefs" in tree_fname:
                        pref_set = "average"
                    else:
                        raise ValueError("Couldn't parse pref set: {0}"
                                         .format(tree_fname))
                else:
                    pref_set = "NA"
                sum = 0
                if control == 0:
                    t = Tree(tree_fname)
                    for node in t.traverse("postorder"):
                        sum += node.dist
                    final["alignment_id"].append(alignment_id)
                    final["model"].append(model_name)
                    final["pref_set"].append(pref_set)
                    final["tree_length"].append(sum)
        final = pd.DataFrame(final)
        final.to_csv(output.tree, index=False)
